const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const OpenAI = require("openai");
const fetch = require("node-fetch");
const csv = require("csv-parser");
const { Readable } = require("stream");
const dayjs = require("dayjs");

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω");
  process.exit(1);
}

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const prices = {
  "30 –≤—ã—Ö–æ–¥–æ–≤": "‚Ç¨9.40",
  "—Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ": "–æ—Ç ‚Ç¨400 –≤ –º–µ—Å—è—Ü",
  "–¥–∂–∏–Ω–≥–ª": "–æ—Ç ‚Ç¨15"
};

// –ü—É—Ç—å –∫ CSV-–≤–µ—Ä—Å–∏–∏ Google –¢–∞–±–ª–∏—Ü—ã
const sheetUrl = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRYscFQEwGmJMM4hxoWEBrYam3JkQMD9FKbKpcwMrgfSdhaducl_FeHNqwPe-Sfn0HSyeQeMnyqvgtN/pub?gid=0&single=true&output=csv";

async function fetchSongs() {
  const res = await fetch(sheetUrl);
  const text = await res.text();

  return new Promise((resolve, reject) => {
    const rows = [];
    Readable.from([text])
      .pipe(csv())
      .on("data", (row) => rows.push(row))
      .on("end", () => resolve(rows))
      .on("error", reject);
  });
}

app.post("/chat", async (req, res) => {
  const userMessage = req.body.message?.trim();
  if (!userMessage) {
    return res.status(400).json({ error: "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
  for (let key in prices) {
    if (userMessage.toLowerCase().includes(key)) {
      const reply = `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ "${key}": ${prices[key]}`;
      return res.json({ reply });
    }
  }

  // –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const dateRegex = /\b(\d{1,2})[./-](\d{1,2})[./-](\d{2,4})\b/;
  const timeRegex = /\b(\d{1,2})[:.](\d{2})\b/;

  const dateMatch = userMessage.match(dateRegex);
  const timeMatch = userMessage.match(timeRegex);

  if (dateMatch && timeMatch) {
    const date = dayjs(
      `${dateMatch[1].padStart(2, "0")}.${dateMatch[2].padStart(2, "0")}.${dateMatch[3].padStart(4, "20")}`,
      "DD.MM.YYYY"
    ).format("DD.MM.YYYY");

    const time = `${timeMatch[1].padStart(2, "0")}:${timeMatch[2]}`;

    try {
      const songs = await fetchSongs();

      const song = songs.find((row) => {
        const rowDate = row["–î–∞—Ç–∞"]?.trim();
        const rowTime = row["–í—Ä–µ–º—è"]?.trim().slice(0, 5);
        return rowDate === date && rowTime === time;
      });

      if (song) {
        return res.json({
          reply: `üé∂ –í ${time} (${date}) –∏–≥—Ä–∞–ª–∞ –ø–µ—Å–Ω—è: ${song["–ü–µ—Å–Ω—è"]}`
        });
      } else {
        return res.json({
          reply: `ü§∑ –ù–µ –Ω–∞—à—ë–ª –ø–µ—Å–Ω—é –Ω–∞ ${time} ${date}`
        });
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã" });
    }
  }

  // GPT-–æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–µ –¥–∞—Ç–∞ –∏ –Ω–µ —Ü–µ–Ω–∞
  const messages = [
    {
      role: "system",
      content: `–¢—ã ‚Äî –ú–∞–π–∫–ª, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ AARK Developers ‚Äî –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ —Å 25-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, –±–æ–ª–µ–µ 4 –º–ª—Ä–¥ –¥–∏—Ä—Ö–∞–º–æ–≤ –≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –≤ –î—É–±–∞–µ –∏ –†–∞—Å-—ç–ª—å-–•–∞–π–º–µ.
–¢—ã ‚Äî —Ç–æ–ø–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 15 –ª–µ—Ç. –¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–∏, —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—ã –Ω–µ –¥–∞–≤–∏—à—å ‚Äî —Ç—ã –≤–µ–¥—ë—à—å –∑–∞ —Å–æ–±–æ–π. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç SORA Tower.
`
    },
    { role: "user", content: userMessage }
  ];

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion.choices?.[0]?.message?.content || "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç GPT";
    res.json({ reply });
  } catch (err) {
    console.error("OpenAI –æ—à–∏–±–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ GPT", detail: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
